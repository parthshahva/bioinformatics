import unittest
import functions


class TestApp(unittest.TestCase):

    def test_count(self):
        text = "CACATCGGGGACATCGGACATCGGGACACATCGGACATCGGTACATCGGCAACATCGGGGAACATCGGCGACATCGGAGCGATACATCGGACATCGGTAGACATCGGAACATCGGTACATCGGACATCGGATTGTACATCGGCACGACATCGGCCCTTCACATCGGAACATCGGTTGCACATCGGTGCCAATAAACATCGGACATCGGAGCACACATCGGTAGACATCGGAAGTGTACACATCGGTTACATCGGAACATCGGGCGTCACATCGGGAGGCACATCGGACAAACATCGGGCATACCATTCAGTTCACATCGGGGACATCGGATACATCGGGCCTACATCGGTCTGACATCGGCAGTGAGACATCGGTACATCGGGTACACATCGGCACATCGGGAACATCGGAGGCACATCGGCACATCGGACATCGGACATCGGAACATCGGACATCGGACATCGGGACATCGGACATCGGTAGTACATCGGACCGGTGATCTCGACATCGGACATCGGAACATCGGGCCCTAAACATCGGCACATCGGACATCGGCACATCGGATGATACATCGGTCACTGTACAGGAAACATCGGATTCCCACATCGGACATCGGGGACATCGGCACATCGGAGAAACATCGGTATACATCGGAGCCTTTCAGTACATCGGACATCGGACATCGGACATCGGTGTACATCGGATTCACATCGGACATCGGCAATGGACATCGGTCAGGTACATCGGCACATCGGACATCGGAACATCGGTTACATCGGCCGCAGGGACATCGGTCACATCGGCTAAAACATCGGTTCCATGTACATCGGACATCGGTTATTACATCGGACATCGGTGCATTCGGCTACTAACATCGGACATCGGGCCATCTGACATCGGTACATCGGACATCGGAACATCGGTACATCGGACATCGGCACATCGGCGAAAAACATCGGACATCGGAACATCGGGCCACTCACATCGG"
        pattern = "ACATCGGAC"
        count = functions.count(text, pattern)
        self.assertEqual(count, 26)

    def test_frequent_words(self):
        text = "ACGTTGCATGTCGCATGATGCATGAGAGCT"
        length = 4
        output = functions.get_frequent_pattern(text, length)
        self.assertEqual(output, "GCAT CATG")

    def test_reverse_complementary_sequence(self):
        text = "AAAACCCGGT"
        output = functions.get_reverse_complementary_seq(text)
        self.assertEqual(output, "ACCGGGTTTT")

    def test_find_starting_points_pattern(self):
        text = "GATATATGCATATACTT"
        pattern = "ATAT"
        output = functions.find_starting_points_pattern(text, pattern)
        self.assertEqual(output,["1","3","9"])